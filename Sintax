CREATE OR replace DATABASE TOURISM;
USE DATABASE TOURISM;

CREATE OR replace SCHEMA EUROPE;
USE SCHEMA EUROPE;

CREATE OR replace TABLE AIRBNB(
    City varchar (30),
    Price NUMBER (12,6),
    DayType varchar(10),
    Room_Type varchar (30),
    Shared_Room varchar(6),
    Private_Room varchar(6),
    Person_Capacity NUMBER(12,6),
    Superhost varchar(6),
    Multiple_Rooms NUMBER (12,6),
    Business NUMBER(12,6),
    Cleanliness_Rating NUMBER (12,6),
    Guest_Satisfaction NUMBER (12,6),
    Bedrooms NUMBER (12,6),
    City_Center NUMBER (12,6),
    Metro_Distance NUMBER (12,6),
    Attraction_Index NUMBER (12,6),
    Normalised_Attraction_Index NUMBER (12,6),
    Restraunt_Index NUMBER (12,6),
    Normalised_Restraunt_Index NUMBER (12,6)
    );


---\ CREATE BULK INSERT CSV FORMAT /---
---field optionally enclosed for double quatation in the records ""
create or replace file format csv_format
    type = 'csv' 
    compression = 'none' 
    field_delimiter = ','
    field_optionally_enclosed_by = '\042'
    skip_header = 1;


    ----------------\ Exploratory Data Analysis /-------------------
-------------Descriptive Analysis and Frequency Distribution----------


---SNIPPET/SNAPSHOT OF THE DATASET
select * from airbnb limit 5;


---NUMBER OF RECORDS IN THE DATASET
select count(*) from airbnb;--41,714 obserbation


---Lets see do we have any MISSING VALUE AS NULL
SELECT * FROM AIRBNB 
WHERE 
    CITY AND PRICE AND DAYTYPE AND ROOM_TYPE AND SHARED_ROOM AND PRIVATE_ROOM AND PERSON_CAPACITY AND SUPERHOST AND 
    MULTIPLE_ROOMS AND BUSINESS AND CLEANLINESS_RATING AND GUEST_SATISFACTION AND BEDROOMS AND CITY_CENTER AND 
    METRO_DISTANCE AND ATTRACTION_INDEX AND NORMALISED_ATTRACTION_INDEX AND RESTRAUNT_INDEX AND NORMALISED_RESTRAUNT_INDEX
    IS NULL
LIMIT 5; --NO MISSIING VALUE AS NULL


---Lets see do we have any MISSING VALUE AS BLANK
SELECT * FROM AIRBNB
WHERE 
    CITY AND PRICE AND DAYTYPE AND ROOM_TYPE AND SHARED_ROOM AND PRIVATE_ROOM AND PERSON_CAPACITY AND SUPERHOST AND
    MULTIPLE_ROOMS AND BUSINESS AND CLEANLINESS_RATING AND GUEST_SATISFACTION AND BEDROOMS AND CITY_CENTER AND 
    METRO_DISTANCE AND ATTRACTION_INDEX AND NORMALISED_ATTRACTION_INDEX AND RESTRAUNT_INDEX AND
    NORMALISED_RESTRAUNT_INDEX = ''
LIMIT 5; --NO MISSING VCALUE AS BLANK


---Lets see Uniqe category of some variables/features.
SELECT COUNT(DISTINCT CITY)
FROM AIRBNB; ---9 City

SELECT DISTINCT CITY
FROM AIRBNB; ---Amsterdam,Athens,Barcelona,Berlin,Budapest,Lisbon,Paris,Vienna,Rome

SELECT DISTINCT ROOM_TYPE
FROM AIRBNB; --Private room,Entire home/apt,Shared room

SELECT DISTINCT person_capacity
FROM AIRBNB; ---2,3,4,5,6

SELECT DISTINCT cleanliness_rating
FROM AIRBNB; ---2 to 10

SELECT DISTINCT guest_satisfaction
FROM AIRBNB; --20 to 100 scale. 51 uniqe category

SELECT DISTINCT bedrooms
FROM AIRBNB; --0,1,2,3,4,5,9,10


---NUMBER OF BOOKINGS IN EACH CITY
SELECT 
    CITY, 
    COUNT(CITY) AS "NUMBER OF BOOKINGS"
FROM AIRBNB
GROUP BY CITY
ORDER BY 2 DESC; --ROME HAS THE HIGHEST OBSERBATION(9,027), AMSTERDAM HAS LEAST (2,080)


---Total Booking Revenue by City
SELECT CITY, 
    ROUND(SUM(PRICE),0) AS "TOTAL BOOKING REVENUE"
    FROM AIRBNB
    GROUP BY CITY
    ORDER BY 2 DESC;--Paris HAS THE HIGHEST Booking Revenue(2,625,250), Berlin HAS LEAST (607,546)


---Combining the two result
SELECT CITY, COUNT(CITY) AS "NUMBER OF BOOKINGS", 
    ROUND(SUM(PRICE),0) AS "TOTAL BOOKING REVENUE"
    FROM AIRBNB
    GROUP BY CITY
    ORDER BY "TOTAL BOOKING REVENUE" DESC;


---TRYING TO MAKE A CAUSAL RELATIONSHIP
SELECT 
    CITY, 
    COUNT(CITY) AS "NUMBER OF BOOKINGS", 
    ROUND(SUM(PRICE),0) AS "TOTAL BOOKING REVENUE", 
    ROUND(AVG(GUEST_SATISFACTION),1) AS "AVERAGE GUEST SATISFACTION SCORE"
FROM AIRBNB
--WHERE DAY ilike '%end' AND ROOM_TYPE ilike 'pri%'
GROUP BY CITY
ORDER BY 4 DESC;


---Lets see city wise min,max,avg of price
select city,
round(min(price),0) as minimum_house_price,
round(max(price),0) as maximum_house_price,
round(avg(price),0) as avrrage_house_price
from airbnb
group by 1
order by 2 desc;


------\ Lets see Some Summary static of variables/features /--------

WITH CTE AS(
(SELECT
  'PRICE' Metrix,
  ROUND(MIN(PRICE),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) "Q1",
  ROUND(MEDIAN(PRICE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) "Q3",
  ROUND(MAX(PRICE),0) MAX,
  ROUND(AVG(PRICE),0) AVG,
  ROUND(MODE(PRICE),0) MODE,
  ROUND(STDDEV(PRICE),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'PERSON_CAPACITY' Metrix,
  ROUND(MIN(PERSON_CAPACITY),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PERSON_CAPACITY) "Q1",
  ROUND(MEDIAN(PRICE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PERSON_CAPACITY) "Q3",
  ROUND(MAX(PERSON_CAPACITY),0) MAX,
  ROUND(AVG(PERSON_CAPACITY),0) AVG,
  ROUND(MODE(PERSON_CAPACITY),0) MODE,
  ROUND(STDDEV(PERSON_CAPACITY),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'CLEANLINESS_RATING' Metrix,
  ROUND(MIN(CLEANLINESS_RATING),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY CLEANLINESS_RATING) "Q1",
  ROUND(MEDIAN(CLEANLINESS_RATING),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY CLEANLINESS_RATING) "Q3",
  ROUND(MAX(CLEANLINESS_RATING),0) MAX,
  ROUND(AVG(CLEANLINESS_RATING),0) AVG,
  ROUND(MODE(CLEANLINESS_RATING),0) MODE,
  ROUND(STDDEV(CLEANLINESS_RATING),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'GUEST_SATISFACTION' Metrix,
  ROUND(MIN(GUEST_SATISFACTION),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY GUEST_SATISFACTION) "Q1",
  ROUND(MEDIAN(GUEST_SATISFACTION),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY GUEST_SATISFACTION) "Q3",
  ROUND(MAX(GUEST_SATISFACTION),0) MAX,
  ROUND(AVG(GUEST_SATISFACTION),0) AVG,
  ROUND(MODE(GUEST_SATISFACTION),0) MODE,
  ROUND(STDDEV(GUEST_SATISFACTION),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'BEDROOMS' Metrix,
  ROUND(MIN(BEDROOMS),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY BEDROOMS) "Q1",
  ROUND(MEDIAN(BEDROOMS),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY BEDROOMS) "Q3",
  ROUND(MAX(BEDROOMS),0) MAX,
  ROUND(AVG(BEDROOMS),0) AVG,
  ROUND(MODE(BEDROOMS),0) MODE,
  ROUND(STDDEV(BEDROOMS),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'CITY_CENTER' Metrix,
  ROUND(MIN(CITY_CENTER),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY CITY_CENTER) "Q1",
  ROUND(MEDIAN(CITY_CENTER),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY CITY_CENTER) "Q3",
  ROUND(MAX(CITY_CENTER),0) MAX,
  ROUND(AVG(CITY_CENTER),0) AVG,
  ROUND(MODE(CITY_CENTER),0) MODE,
  ROUND(STDDEV(CITY_CENTER),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'METRO_DISTANCE' Metrix,
  ROUND(MIN(METRO_DISTANCE),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY METRO_DISTANCE) "Q1",
  ROUND(MEDIAN(METRO_DISTANCE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY METRO_DISTANCE) "Q3",
  ROUND(MAX(METRO_DISTANCE),0) MAX,
  ROUND(AVG(METRO_DISTANCE),0) AVG,
  ROUND(MODE(METRO_DISTANCE),0) MODE,
  ROUND(STDDEV(METRO_DISTANCE),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'ATTRACTION_INDEX' Metrix,
  ROUND(MIN(ATTRACTION_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ATTRACTION_INDEX) "Q1",
  ROUND(MEDIAN(ATTRACTION_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ATTRACTION_INDEX) "Q3",
  ROUND(MAX(ATTRACTION_INDEX),0) MAX,
  ROUND(AVG(ATTRACTION_INDEX),0) AVG,
  ROUND(MODE(ATTRACTION_INDEX),0) MODE,
  ROUND(STDDEV(ATTRACTION_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'NORMALISED_ATTRACTION_INDEX' Metrix,
  ROUND(MIN(NORMALISED_ATTRACTION_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NORMALISED_ATTRACTION_INDEX) "Q1",
  ROUND(MEDIAN(NORMALISED_ATTRACTION_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NORMALISED_ATTRACTION_INDEX) "Q3",
  ROUND(MAX(NORMALISED_ATTRACTION_INDEX),0) MAX,
  ROUND(AVG(NORMALISED_ATTRACTION_INDEX),0) AVG,
  ROUND(MODE(NORMALISED_ATTRACTION_INDEX),0) MODE,
  ROUND(STDDEV(NORMALISED_ATTRACTION_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'RESTRAUNT_INDEX' Metrix,
  ROUND(MIN(RESTRAUNT_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY RESTRAUNT_INDEX) "Q1",
  ROUND(MEDIAN(RESTRAUNT_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY RESTRAUNT_INDEX) "Q3",
  ROUND(MAX(RESTRAUNT_INDEX),0) MAX,
  ROUND(AVG(RESTRAUNT_INDEX),0) AVG,
  ROUND(MODE(RESTRAUNT_INDEX),0) MODE,
  ROUND(STDDEV(RESTRAUNT_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'NORMALISED_RESTRAUNT_INDEX' Metrix,
  ROUND(MIN(NORMALISED_RESTRAUNT_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NORMALISED_RESTRAUNT_INDEX) "Q1",
  ROUND(MEDIAN(NORMALISED_RESTRAUNT_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NORMALISED_RESTRAUNT_INDEX) "Q3",
  ROUND(MAX(NORMALISED_RESTRAUNT_INDEX),0) MAX,
  ROUND(AVG(NORMALISED_RESTRAUNT_INDEX),0) AVG,
  ROUND(MODE(NORMALISED_RESTRAUNT_INDEX),0) MODE,
  ROUND(STDDEV(NORMALISED_RESTRAUNT_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
)
SELECT * FROM CTE;


---\ FIVE NUMBER SUMMARY AND INTER-QUARTILE RANGES (IQR) /---

WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
min(price) AS Min_price,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY price) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price) AS Q3,
max(price) AS MAX_ORDER_VALUE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price)) AS IQR
FROM airbnb)

SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F; --Lower Hinge: -86.01985 and UPPER HINGE: 527.40935

---\ FINDING OUTLIERS /---
WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(price) AS MIN_price,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY price) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price) AS Q3,
MAX(price) AS MAX_price,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price)) AS IQR
FROM airbnb),
HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F)

SELECT 
    COUNT (*) AS "NUMBER OF OUTLIERS IN PRICE FIELD" 
FROM AIRBNB
    WHERE PRICE < (SELECT LOWER_HINGE FROM HINGES) OR PRICE > (SELECT UPPER_HINGE FROM HINGES);---2,891 outliers

---Creating a View and Trying to Find Patterns in Outliers---
CREATE OR REPLACE VIEW OUTLIER AS
(
    WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(PRICE) AS MIN_ORDER_VALUE,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY PRICE) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) AS Q3,
MAX(PRICE) AS MAX_ORDER_VALUE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE)) AS IQR
FROM AIRBNB),

HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY)

SELECT 
    *
FROM AIRBNB
    WHERE PRICE < (SELECT LOWER_HINGE FROM HINGES) OR PRICE > (SELECT UPPER_HINGE FROM HINGES)
    );

SELECT * FROM OUTLIER;

SELECT 
    ROOM_TYPE AS "ROOM TYPE",
    COUNT(*) AS "NO. OF Bookings", 
    ROUND(MIN(PRICE),1) AS "MINIMUM OUTLIER PRICE VALUE",
    ROUND(MAX(PRICE),1) AS "MAXIMUM OUTLIER PRICE VALUE",
    ROUND(AVG(PRICE),1) AS "AVERAGE OUTLIER PRICE VALUE"
FROM OUTLIER
GROUP BY ROOM_TYPE;

---COMPARE THIS WITH THE MAIN DATA
SELECT 
    ROOM_TYPE AS "ROOM TYPE",
    COUNT(*) AS "NO. OF Bookings", 
    ROUND(MIN(PRICE),1) AS "MINIMUM PRICE VALUE",
    ROUND(MAX(PRICE),1) AS "MAXIMUM PRICE VALUE",
    ROUND(AVG(PRICE),1) AS "AVERAGE PRICE VALUE"
FROM AIRBNB
GROUP BY ROOM_TYPE;--NOTICE THE DIFFERENCE IN THE AVERAGE OUTLIER PRICE VALUE Vs. AVERAGE PRICE VALUE


---\ REMOVING OUTLIERS & STORING THE CLEANED DATA IN ANOTHER VIEW /---
CREATE VIEW CLEANED AS
(
    WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(PRICE) AS MIN_ORDER_VALUE,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY PRICE) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) AS Q3,
MAX(PRICE) AS MAX_ORDER_VALUE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE)) AS IQR
FROM AIRBNB),

HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY)

SELECT * FROM AIRBNB
WHERE PRICE > (SELECT LOWER_HINGE FROM HINGES) AND PRICE < (SELECT UPPER_HINGE FROM HINGES)
    );

SELECT COUNT(*) FROM CLEANED; ---38823 obserbation

---\ Lets see summary statistics of the cleaned data /---

WITH CTE AS(
(SELECT
  'PRICE' Metrix,
  ROUND(MIN(PRICE),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) "Q1",
  ROUND(MEDIAN(PRICE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) "Q3",
  ROUND(MAX(PRICE),0) MAX,
  ROUND(AVG(PRICE),0) AVG,
  ROUND(MODE(PRICE),0) MODE,
  ROUND(STDDEV(PRICE),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'PERSON_CAPACITY' Metrix,
  ROUND(MIN(PERSON_CAPACITY),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PERSON_CAPACITY) "Q1",
  ROUND(MEDIAN(PRICE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PERSON_CAPACITY) "Q3",
  ROUND(MAX(PERSON_CAPACITY),0) MAX,
  ROUND(AVG(PERSON_CAPACITY),0) AVG,
  ROUND(MODE(PERSON_CAPACITY),0) MODE,
  ROUND(STDDEV(PERSON_CAPACITY),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'CLEANLINESS_RATING' Metrix,
  ROUND(MIN(CLEANLINESS_RATING),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY CLEANLINESS_RATING) "Q1",
  ROUND(MEDIAN(CLEANLINESS_RATING),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY CLEANLINESS_RATING) "Q3",
  ROUND(MAX(CLEANLINESS_RATING),0) MAX,
  ROUND(AVG(CLEANLINESS_RATING),0) AVG,
  ROUND(MODE(CLEANLINESS_RATING),0) MODE,
  ROUND(STDDEV(CLEANLINESS_RATING),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'GUEST_SATISFACTION' Metrix,
  ROUND(MIN(GUEST_SATISFACTION),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY GUEST_SATISFACTION) "Q1",
  ROUND(MEDIAN(GUEST_SATISFACTION),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY GUEST_SATISFACTION) "Q3",
  ROUND(MAX(GUEST_SATISFACTION),0) MAX,
  ROUND(AVG(GUEST_SATISFACTION),0) AVG,
  ROUND(MODE(GUEST_SATISFACTION),0) MODE,
  ROUND(STDDEV(GUEST_SATISFACTION),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'BEDROOMS' Metrix,
  ROUND(MIN(BEDROOMS),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY BEDROOMS) "Q1",
  ROUND(MEDIAN(BEDROOMS),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY BEDROOMS) "Q3",
  ROUND(MAX(BEDROOMS),0) MAX,
  ROUND(AVG(BEDROOMS),0) AVG,
  ROUND(MODE(BEDROOMS),0) MODE,
  ROUND(STDDEV(BEDROOMS),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'CITY_CENTER' Metrix,
  ROUND(MIN(CITY_CENTER),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY CITY_CENTER) "Q1",
  ROUND(MEDIAN(CITY_CENTER),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY CITY_CENTER) "Q3",
  ROUND(MAX(CITY_CENTER),0) MAX,
  ROUND(AVG(CITY_CENTER),0) AVG,
  ROUND(MODE(CITY_CENTER),0) MODE,
  ROUND(STDDEV(CITY_CENTER),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'METRO_DISTANCE' Metrix,
  ROUND(MIN(METRO_DISTANCE),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY METRO_DISTANCE) "Q1",
  ROUND(MEDIAN(METRO_DISTANCE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY METRO_DISTANCE) "Q3",
  ROUND(MAX(METRO_DISTANCE),0) MAX,
  ROUND(AVG(METRO_DISTANCE),0) AVG,
  ROUND(MODE(METRO_DISTANCE),0) MODE,
  ROUND(STDDEV(METRO_DISTANCE),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'ATTRACTION_INDEX' Metrix,
  ROUND(MIN(ATTRACTION_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ATTRACTION_INDEX) "Q1",
  ROUND(MEDIAN(ATTRACTION_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ATTRACTION_INDEX) "Q3",
  ROUND(MAX(ATTRACTION_INDEX),0) MAX,
  ROUND(AVG(ATTRACTION_INDEX),0) AVG,
  ROUND(MODE(ATTRACTION_INDEX),0) MODE,
  ROUND(STDDEV(ATTRACTION_INDEX),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'NORMALISED_ATTRACTION_INDEX' Metrix,
  ROUND(MIN(NORMALISED_ATTRACTION_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NORMALISED_ATTRACTION_INDEX) "Q1",
  ROUND(MEDIAN(NORMALISED_ATTRACTION_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NORMALISED_ATTRACTION_INDEX) "Q3",
  ROUND(MAX(NORMALISED_ATTRACTION_INDEX),0) MAX,
  ROUND(AVG(NORMALISED_ATTRACTION_INDEX),0) AVG,
  ROUND(MODE(NORMALISED_ATTRACTION_INDEX),0) MODE,
  ROUND(STDDEV(NORMALISED_ATTRACTION_INDEX),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'RESTRAUNT_INDEX' Metrix,
  ROUND(MIN(RESTRAUNT_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY RESTRAUNT_INDEX) "Q1",
  ROUND(MEDIAN(RESTRAUNT_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY RESTRAUNT_INDEX) "Q3",
  ROUND(MAX(RESTRAUNT_INDEX),0) MAX,
  ROUND(AVG(RESTRAUNT_INDEX),0) AVG,
  ROUND(MODE(RESTRAUNT_INDEX),0) MODE,
  ROUND(STDDEV(RESTRAUNT_INDEX),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
UNION ALL 
(SELECT
  'NORMALISED_RESTRAUNT_INDEX' Metrix,
  ROUND(MIN(NORMALISED_RESTRAUNT_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NORMALISED_RESTRAUNT_INDEX) "Q1",
  ROUND(MEDIAN(NORMALISED_RESTRAUNT_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NORMALISED_RESTRAUNT_INDEX) "Q3",
  ROUND(MAX(NORMALISED_RESTRAUNT_INDEX),0) MAX,
  ROUND(AVG(NORMALISED_RESTRAUNT_INDEX),0) AVG,
  ROUND(MODE(NORMALISED_RESTRAUNT_INDEX),0) MODE,
  ROUND(STDDEV(NORMALISED_RESTRAUNT_INDEX),2) STD_DEV
FROM CLEANED
GROUP BY Metrix)
)
SELECT * FROM CTE;

---Room Tye wise summary
SELECT 
    ROOM_TYPE AS "ROOM TYPE",
    COUNT(*) AS "NO. OF Bookings", 
    ROUND(MIN(PRICE),1) AS "MINIMUM PRICE VALUE",
    ROUND(MAX(PRICE),1) AS "MAXIMUM PRICE VALUE",
    ROUND(AVG(PRICE),1) AS "AVERAGE PRICE VALUE"
FROM CLEANED
GROUP BY ROOM_TYPE;

---City & Room Tye wise Summary
SELECT 
    CITY,
    ROOM_TYPE AS "ROOM TYPE",
    COUNT(*) AS "NO. OF Bookings", 
    ROUND(MIN(PRICE),1) AS "MINIMUM PRICE VALUE",
    ROUND(MAX(PRICE),1) AS "MAXIMUM PRICE VALUE",
    ROUND(AVG(PRICE),1) AS "AVERAGE PRICE VALUE"
FROM CLEANED
GROUP BY CITY, ROOM_TYPE
ORDER BY CITY, ROOM_TYPE;

/*
CHECK OUT THE AVERAGE PRICE VALUE. This depicts the real scenario of AIRBNB Booking Price of Europe.
That's what you can expect when you are going to book */

SELECT ROOM_TYPE,
    ROUND(AVG(PRICE),0) AS AVERAGE_ROOM_TYPE_PRICE,
    ROUND(MIN(PRICE),1) AS MINIMUM_BOOKING_PRICE,
    ROUND(MAX(PRICE),1) AS MAXIMUM_BOOKING_PRICE,
    ROUND(SUM(PRICE),0) AS "TOTAL BOOKING PRICE",
    COUNT(ROOM_TYPE) AS NUMBER_OF_BOOKING
FROM CLEANED
GROUP BY ROOM_TYPE
ORDER BY AVERAGE_ROOM_TYPE_PRICE DESC;

---WEEKEND-WEEKDAY COMPARATIVE ANALYSIS for cleaned data
SELECT
    DAYTYPE AS DAY_TYPE,
    ROUND(AVG(PRICE),0) AS AVERAGE_PRICE,
    ROUND(MIN(PRICE),1) AS MINIMUM_BOOKING_PRICE,
    ROUND(MAX(PRICE),1) AS MAXIMUM_BOOKING_PRICE,
    ROUND(SUM(PRICE),0) AS "TOTAL BOOKING PRICE",
    COUNT(ROOM_TYPE) AS NUMBER_OF_BOOKING
FROM CLEANED
GROUP BY DAYTYPE
ORDER BY "TOTAL BOOKING PRICE" DESC;

---lets see summary of the FACILTY feature
---city wise avg distance from city & metro
SELECT 
    CITY, 
    ROUND(avg(metro_distance), 2) AS "AVERAGE DISTANCE FROM METRO KM",
    ROUND(avg(city_center), 2) AS "AVERAGE DISTANCE FROM CITY CENTRE IN KM"
    FROM CLEANED
GROUP BY CITY
ORDER BY 2;

---No. Of Bookings By ROOM TYPE
SELECT 
    ROOM_TYPE, 
    COUNT(*) AS NUMBER_OF_BOOKINGS
FROM CLEANED
GROUP BY ROOM_TYPE
ORDER BY 2 DESC;

---Day & Room type wise Num of Bookings
SELECT 
    DAYTYPE, 
    ROOM_TYPE, 
    COUNT(*) AS NUMBER_OF_BOOKINGS
FROM CLEANED
GROUP BY DAYTYPE, ROOM_TYPE
order by 3 desc;

---Num of Bookings by renaming room type
SELECT 
    DAYTYPE,
    COUNT(CASE WHEN ROOM_TYPE = 'Private room' THEN ROOM_TYPE ELSE NULL END) AS PRIVATE_ROOM_BOOKING,
    COUNT(CASE WHEN ROOM_TYPE = 'Entire home/apt' THEN ROOM_TYPE ELSE NULL END) AS APARTMENT_ROOM_BOOKING,
    COUNT(CASE WHEN ROOM_TYPE = 'Shared room' THEN ROOM_TYPE ELSE NULL END) AS SHARED_ROOM_BOOKING
FROM CLEANED
GROUP BY DAYTYPE;

---Revenue of Bookings by renaming room type
SELECT 
    DAYTYPE,
    ROUND(SUM(CASE WHEN ROOM_TYPE = 'Private room' THEN PRICE ELSE 0 END),0) AS PRIVATE_ROOM_BOOKING_REVENUE,
    ROUND(SUM(CASE WHEN ROOM_TYPE = 'Entire home/apt' THEN PRICE ELSE 0 END),0) AS APARTMENT_ROOM_BOOKING_REVENUE,
    ROUND(SUM(CASE WHEN ROOM_TYPE = 'Shared room' THEN PRICE ELSE 0 END),0) AS SHARED_ROOM_BOOKING_REVENUE
FROM CLEANED
GROUP BY DAYTYPE;

--RE-CODING AND SUBQUERY
SELECT 
    DISTINCT ROOM_TYPE_CLEANED
FROM
(SELECT
CASE WHEN ROOM_TYPE = 'Private room' THEN 'Private'
    WHEN ROOM_TYPE = 'Entire home/apt' THEN 'APARTMENT'
    ELSE 'SHARED' END AS ROOM_TYPE_CLEANED
FROM CLEANED);

--RE-CODING AND CTE (COMMON TABLE EXPRESSION)
WITH TEMPORARY_OUTPUT AS 
(SELECT *,
CASE WHEN ROOM_TYPE = 'Private room' THEN 'Private'
    WHEN ROOM_TYPE = 'Entire home/apt' THEN 'APARTMENT'
    ELSE 'SHARED' END AS ROOM_TYPE_CLEANED
FROM CLEANED)

SELECT 
    ROOM_TYPE_CLEANED, 
    COUNT(*) AS NUMBER_OF_BOOKING
FROM TEMPORARY_OUTPUT
GROUP BY ROOM_TYPE_CLEANED;

---\ Normaly Distribute of data by removing outliers /---

WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(price) AS MIN_price,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY price) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price) AS Q3,
MAX(price) AS MAX_price,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price)) AS IQR
FROM airbnb),
HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F)
SELECT price FROM airbnb
WHERE price > (SELECT LOWER_HINGE FROM HINGES) AND price < (SELECT UPPER_HINGE FROM HINGES);

---\ GUEST SATISFACTION ANALYSIS /---
SELECT 
    ROUND(AVG(GUEST_SATISFACTION),1) AS AVERAGE_GUEST_SATISFACTION_SCORE,
    ROUND(MIN(GUEST_SATISFACTION),1) AS MINIMUM_GUEST_SATISFACTION_SCORE,
    ROUND(MAX(GUEST_SATISFACTION),1) AS MAXIMUM_GUEST_SATISFACTION_SCORE
FROM CLEANED;--AVERAGE-93; MIN-20; MAX-100

--GUEST SATISFACTION BY CITY
SELECT 
    CITY,
    ROUND(AVG(GUEST_SATISFACTION),1) AS AVERAGE_GUEST_SATISFACTION_SCORE,
    ROUND(MIN(GUEST_SATISFACTION),1) AS MINIMUM_GUEST_SATISFACTION_SCORE,
    ROUND(MAX(GUEST_SATISFACTION),1) AS MAXIMUM_GUEST_SATISFACTION_SCORE
FROM CLEANED
    GROUP BY CITY
    ORDER BY AVERAGE_GUEST_SATISFACTION_SCORE DESC;

--INSPECTING THE REASON BEHIND THE DIFFERENCE IN AVERAGE GUEST SATISFACTION SCORE
SELECT 
    CITY,
    ROUND(AVG(GUEST_SATISFACTION),1) AS AVERAGE_GUEST_SATISFACTION_SCORE,
    ROUND(AVG(CLEANLINESS_RATING),2) AS AVERAGE_CLEANLINESS_RATING,
    ROUND(AVG(PRICE),0) AS AVERAGE_PRICE,
    ROUND(AVG(NORMALISED_ATTRACTION_INDEX),1) AS AVERAGE_ATTRACTION_INDEX,
    ROUND(MAX(CITY_CENTER),1) AS AVERAGE_DISTANCE_FROM_CITY_CENTER,
    ROUND(MAX(METRO_DISTANCE),1) AS AVERAGE_DISTANCE_FROM_METRO
FROM CLEANED
    GROUP BY CITY
    ORDER BY AVERAGE_GUEST_SATISFACTION_SCORE DESC;

/*
So, guests are leaving Athens, Budapest with more ratings in terms of satisfaction because average booking price is low
compare with the other cities and those have the highest cleanlinsess rating as well. 

However, the attraction index and distance from the city center or metro do not substantially impact the guest satisfaction score.
*/
---finding correlation
SELECT 
    CITY, 
    ATTRACTION_INDEX, 
    NORMALISED_ATTRACTION_INDEX 
FROM CLEANED
    LIMIT 100;
--correlation between GUEST SATISFACTION AND ATTRACTION INDEX
SELECT 
    ROUND(CORR(GUEST_SATISFACTION, NORMALISED_ATTRACTION_INDEX), 2) AS "CORRELATION BET GUEST SATISFACTION AND ATTRACTION INDEX"
FROM CLEANED;--SEE, NOT MUCH ASSOCIATION
---correlation between "GUEST SATISFACTION AND PRICE" , "GUEST SATISFACTION AND CLEANINGNESS"
SELECT 
    ROUND(CORR(GUEST_SATISFACTION, PRICE), 2) AS "CORRELATION BET GUEST SATISFACTION AND PRICE",
    ROUND(CORR(GUEST_SATISFACTION, cleanliness_rating), 2) AS "CORRELATION BET GUEST SATISFACTION AND CLEANINGNESS RATING"
FROM CLEANED;--PRICE DOESN'T HAVE ANY ASSOCIATION, BUT CLEANINGNESS RATING DOES HAVE A MODERATE TO STRONG POSITIVE ASSOCIATION (0.6921501012)

---Finding Correlation of Guest Satisfiction with all the variables
WITH CTE AS(
(SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'PRICE' Feature_2, 
    ROUND(CORR(PRICE,GUEST_SATISFACTION),2) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'PERSON_CAPACITY' Feature_2, 
    CORR(PERSON_CAPACITY,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'CLEANLINESS_RATING' Feature_2, 
    CORR(CLEANLINESS_RATING,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'BEDROOMS' Feature_2, 
    CORR(BEDROOMS,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'CITY_CENTER' Feature_2, 
    CORR(CITY_CENTER,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'METRO_DISTANCE' Feature_2, 
    CORR(METRO_DISTANCE,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'ATTRACTION_INDEX' Feature_2, 
    CORR(ATTRACTION_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'NORMALISED_ATTRACTION_INDEX' Feature_2, 
    CORR(NORMALISED_ATTRACTION_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 
    'GUEST_SATISFACTION' Feature_1, 
    'RESTRAUNT_INDEX' Feature_2, 
    CORR(RESTRAUNT_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 
    'GUEST_SATISFACTION'Feature_1, 
    'NORMALISED_RESTRAUNT_INDEX' Feature_2, 
    CORR(NORMALISED_RESTRAUNT_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB))

SELECT * FROM CTE; --highest correlations are between Cleanliness_rating and Guest_Satisfaction DOES HAVE A MODERATE TO STRONG POSITIVE ASSOCIATION (0.6921501012)


-------------\ FREQUENCY Distribution /------------------
SELECT guest_satisfaction,
    CASE
        WHEN round((guest_satisfaction),0)=20 and 30 and 40 and 44 and 47 and 50 
        THEN '20-50'
        WHEN round((guest_satisfaction),0)=53 and 54 and 55 and 56 and 57 and 60 and 62 and 63 and 64 and 65 and 66 and 67 and 68 and 69 and 70 and 71 and 72 and 73 and 74 and 75 and 76 and 77 and 78 and 79 and 80 
        THEN '50-80'
        WHEN round((guest_satisfaction),0)=81 and 82 and 83 and 84 and 85 and 86 and 87 and 88 and 89 and 90 and 91 and 92 and 93 and 94 and 95 and 96 and 97 and 98 and 99 and 100 
        THEN '80-100'
    END AS result
FROM airbnb;

select distinct guest_satisfaction from airbnb;

--Guest_Satisfaction
SELECT guest_satisfaction, count(guest_satisfaction) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC; --most of the obserbation are between 80 to 100

--PERSON_CAPACITY
SELECT person_capacity, count(person_capacity) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--PRICE
SELECT price, count(price) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--CLEANLINESS_RATING
SELECT cleanliness_rating, count(cleanliness_rating) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--BEDROOMS
SELECT bedrooms, count(bedrooms) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--CITY_CENTER
SELECT city_center, count(city_center) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

 --METRO_DISTANCE
SELECT metro_distance, count(metro_distance) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;
